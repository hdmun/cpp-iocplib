// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SERVERMESSAGE_MESSAGE_SERVER_H_
#define FLATBUFFERS_GENERATED_SERVERMESSAGE_MESSAGE_SERVER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 10 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace message {
namespace server {

struct Packet;
struct PacketBuilder;

struct LoginResult;
struct LoginResultBuilder;

struct LogoutResult;
struct LogoutResultBuilder;

struct ConnectServerResult;
struct ConnectServerResultBuilder;

enum PacketType : uint8_t {
  PacketType_NONE = 0,
  PacketType_LoginResult = 1,
  PacketType_LogoutResult = 2,
  PacketType_ConnectServerResult = 3,
  PacketType_MIN = PacketType_NONE,
  PacketType_MAX = PacketType_ConnectServerResult
};

inline const PacketType (&EnumValuesPacketType())[4] {
  static const PacketType values[] = {
    PacketType_NONE,
    PacketType_LoginResult,
    PacketType_LogoutResult,
    PacketType_ConnectServerResult
  };
  return values;
}

inline const char * const *EnumNamesPacketType() {
  static const char * const names[5] = {
    "NONE",
    "LoginResult",
    "LogoutResult",
    "ConnectServerResult",
    nullptr
  };
  return names;
}

inline const char *EnumNamePacketType(PacketType e) {
  if (flatbuffers::IsOutRange(e, PacketType_NONE, PacketType_ConnectServerResult)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPacketType()[index];
}

template<typename T> struct PacketTypeTraits {
  static const PacketType enum_value = PacketType_NONE;
};

template<> struct PacketTypeTraits<message::server::LoginResult> {
  static const PacketType enum_value = PacketType_LoginResult;
};

template<> struct PacketTypeTraits<message::server::LogoutResult> {
  static const PacketType enum_value = PacketType_LogoutResult;
};

template<> struct PacketTypeTraits<message::server::ConnectServerResult> {
  static const PacketType enum_value = PacketType_ConnectServerResult;
};

bool VerifyPacketType(flatbuffers::Verifier &verifier, const void *obj, PacketType type);
bool VerifyPacketTypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Packet FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE_TYPE = 4,
    VT_TYPE = 6
  };
  message::server::PacketType type_type() const {
    return static_cast<message::server::PacketType>(GetField<uint8_t>(VT_TYPE_TYPE, 0));
  }
  const void *type() const {
    return GetPointer<const void *>(VT_TYPE);
  }
  template<typename T> const T *type_as() const;
  const message::server::LoginResult *type_as_LoginResult() const {
    return type_type() == message::server::PacketType_LoginResult ? static_cast<const message::server::LoginResult *>(type()) : nullptr;
  }
  const message::server::LogoutResult *type_as_LogoutResult() const {
    return type_type() == message::server::PacketType_LogoutResult ? static_cast<const message::server::LogoutResult *>(type()) : nullptr;
  }
  const message::server::ConnectServerResult *type_as_ConnectServerResult() const {
    return type_type() == message::server::PacketType_ConnectServerResult ? static_cast<const message::server::ConnectServerResult *>(type()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE_TYPE, 1) &&
           VerifyOffset(verifier, VT_TYPE) &&
           VerifyPacketType(verifier, type(), type_type()) &&
           verifier.EndTable();
  }
};

template<> inline const message::server::LoginResult *Packet::type_as<message::server::LoginResult>() const {
  return type_as_LoginResult();
}

template<> inline const message::server::LogoutResult *Packet::type_as<message::server::LogoutResult>() const {
  return type_as_LogoutResult();
}

template<> inline const message::server::ConnectServerResult *Packet::type_as<message::server::ConnectServerResult>() const {
  return type_as_ConnectServerResult();
}

struct PacketBuilder {
  typedef Packet Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type_type(message::server::PacketType type_type) {
    fbb_.AddElement<uint8_t>(Packet::VT_TYPE_TYPE, static_cast<uint8_t>(type_type), 0);
  }
  void add_type(flatbuffers::Offset<void> type) {
    fbb_.AddOffset(Packet::VT_TYPE, type);
  }
  explicit PacketBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Packet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Packet>(end);
    return o;
  }
};

inline flatbuffers::Offset<Packet> CreatePacket(
    flatbuffers::FlatBufferBuilder &_fbb,
    message::server::PacketType type_type = message::server::PacketType_NONE,
    flatbuffers::Offset<void> type = 0) {
  PacketBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_type_type(type_type);
  return builder_.Finish();
}

struct LoginResult FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LoginResultBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ERROR = 4
  };
  int32_t error() const {
    return GetField<int32_t>(VT_ERROR, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERROR, 4) &&
           verifier.EndTable();
  }
};

struct LoginResultBuilder {
  typedef LoginResult Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_error(int32_t error) {
    fbb_.AddElement<int32_t>(LoginResult::VT_ERROR, error, 0);
  }
  explicit LoginResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<LoginResult> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LoginResult>(end);
    return o;
  }
};

inline flatbuffers::Offset<LoginResult> CreateLoginResult(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t error = 0) {
  LoginResultBuilder builder_(_fbb);
  builder_.add_error(error);
  return builder_.Finish();
}

struct LogoutResult FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LogoutResultBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct LogoutResultBuilder {
  typedef LogoutResult Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit LogoutResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<LogoutResult> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LogoutResult>(end);
    return o;
  }
};

inline flatbuffers::Offset<LogoutResult> CreateLogoutResult(
    flatbuffers::FlatBufferBuilder &_fbb) {
  LogoutResultBuilder builder_(_fbb);
  return builder_.Finish();
}

struct ConnectServerResult FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ConnectServerResultBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ERROR = 4
  };
  int32_t error() const {
    return GetField<int32_t>(VT_ERROR, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERROR, 4) &&
           verifier.EndTable();
  }
};

struct ConnectServerResultBuilder {
  typedef ConnectServerResult Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_error(int32_t error) {
    fbb_.AddElement<int32_t>(ConnectServerResult::VT_ERROR, error, 0);
  }
  explicit ConnectServerResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ConnectServerResult> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ConnectServerResult>(end);
    return o;
  }
};

inline flatbuffers::Offset<ConnectServerResult> CreateConnectServerResult(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t error = 0) {
  ConnectServerResultBuilder builder_(_fbb);
  builder_.add_error(error);
  return builder_.Finish();
}

inline bool VerifyPacketType(flatbuffers::Verifier &verifier, const void *obj, PacketType type) {
  switch (type) {
    case PacketType_NONE: {
      return true;
    }
    case PacketType_LoginResult: {
      auto ptr = reinterpret_cast<const message::server::LoginResult *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType_LogoutResult: {
      auto ptr = reinterpret_cast<const message::server::LogoutResult *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketType_ConnectServerResult: {
      auto ptr = reinterpret_cast<const message::server::ConnectServerResult *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyPacketTypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPacketType(
        verifier,  values->Get(i), types->GetEnum<PacketType>(i))) {
      return false;
    }
  }
  return true;
}

inline const message::server::Packet *GetPacket(const void *buf) {
  return flatbuffers::GetRoot<message::server::Packet>(buf);
}

inline const message::server::Packet *GetSizePrefixedPacket(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<message::server::Packet>(buf);
}

inline bool VerifyPacketBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<message::server::Packet>(nullptr);
}

inline bool VerifySizePrefixedPacketBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<message::server::Packet>(nullptr);
}

inline void FinishPacketBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<message::server::Packet> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPacketBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<message::server::Packet> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace server
}  // namespace message

#endif  // FLATBUFFERS_GENERATED_SERVERMESSAGE_MESSAGE_SERVER_H_
